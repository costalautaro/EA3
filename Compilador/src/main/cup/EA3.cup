import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.stream.IntStream;
import Tercetos.ListaDeTercetos;
import Tabla.TablaDeSimbolos;
import Assembler.GestorDeCodigoAssembler;

action code     //Codigo para las acciones gramaticales
{:
    Integer Sind, Pind, SEind, Rind, Aind, Promind, Lind, Wind, Etind;
    Integer contString;
    ListaDeTercetos listaDeTercetos = new ListaDeTercetos();
    TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
	Boolean listaVacia;
    GestorDeCodigoAssembler gestorDeCodigoAssembler = new GestorDeCodigoAssembler();
	Integer contadorCteString = 0;

    String errorListaVacia = "La lista esta vacia, resultado: 0";
    String errorPivot = "El valor debe ser >=1";
    String errorMayor = "No existen elementos para el calculo, el resultado es 0";
    public void mostrarRegla(Regla regla) {
//        System.out.println(regla);
    }
    public void agregarErroresATabla() {
        tablaDeSimbolos.agregarEnTabla("@errorListaVacia", "String", '"'+errorListaVacia+'"', errorListaVacia.length());
        tablaDeSimbolos.agregarEnTabla("@errorPivot", "String", '"'+errorPivot+'"', errorPivot.length());
        tablaDeSimbolos.agregarEnTabla("@errorMayor", "String", '"'+errorMayor+'"', errorMayor.length());
    }
:}




parser code     //Codigo que se le agrega al parser
{:

:}

                //Declaracion de terminales
terminal String cte;
terminal String id;
terminal asigna;
terminal para;
terminal parc;
terminal String cte_s;
terminal write;
terminal promr;
terminal pyc;
terminal ca;
terminal cc;
terminal coma;
terminal read;

                //Declaracion de no terminales

non terminal Symbol S,
                    PROG,
                    SENT,
                    READ,
                    ASIG,
                    PROMR,
                    LISTA,
                    WRITE;

start with S;

                //Regla gramaticales

S       ::= PROG {: mostrarRegla(Regla.REGLA_0_S);
                Sind = Pind;
                agregarErroresATabla();
                tablaDeSimbolos.guardarTabla();
                listaDeTercetos.guardarTercetos();
                gestorDeCodigoAssembler.escribirAssemblerDeTercetos(listaDeTercetos.getTercetos(), tablaDeSimbolos.getListaDeSimbolos());
                System.out.println("Compilacion OK");
            :}
            ;

PROG    ::= SENT {: mostrarRegla(Regla.REGLA_1_PROG);
            Pind = SEind;
        :}
        | PROG SENT {: mostrarRegla(Regla.REGLA_2_PROG); :}
        ;

SENT    ::= READ {: mostrarRegla(Regla.REGLA_3_SENT_R);
             SEind = Rind;
         :}
        | WRITE {: mostrarRegla(Regla.REGLA_3_SENT_W);
            SEind = Wind;
         :}
        | ASIG {: mostrarRegla(Regla.REGLA_3_SENT_A);
            SEind = Aind;
         :}
        ;

READ    ::= read id:id {: mostrarRegla(Regla.REGLA_4_READ);
            tablaDeSimbolos.agregarEnTabla(id, "Integer", null, null);
            tablaDeSimbolos.agregarEnTabla("_1" , "Integer", "1", null);
            String nombreCte = "_cte_s"+contadorCteString;
            contadorCteString++;
            String valorCte ="Por favor, ingrese nuevamente un numero: ";
            tablaDeSimbolos.agregarEnTabla(nombreCte, "String", '"'+valorCte+'"',null);
            
            Etind = listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Rind = listaDeTercetos.crearTerceto("READ", id);
            Rind =  listaDeTercetos.crearTerceto("CMP", id, "_1");
            Rind =  listaDeTercetos.crearTerceto("BGT", Rind + 5);
            listaDeTercetos.crearTerceto("WRITE", "@errorPivot");
            listaDeTercetos.crearTerceto("WRITE", nombreCte);
            listaDeTercetos.crearTerceto("READ", id);
            //listaDeTercetos.crearTerceto("BI", Etind);
			listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            listaDeTercetos.crearTerceto("=", "@pivot", id );
          
        :}
        ;

ASIG    ::= id:id asigna PROMR {: mostrarRegla(Regla.REGLA_5_ASIG);
            tablaDeSimbolos.agregarEnTabla(id, "Integer", null, null);
            
            listaDeTercetos.crearTerceto("=", id, "@resultado");
        :}
        ;

PROMR  ::= promr para id:id pyc ca LISTA cc parc {: mostrarRegla(Regla.REGLA_6_SI);
            Promind = listaDeTercetos.crearTerceto("CMP", "@contador", "_0");
            listaDeTercetos.crearTerceto("BNE", Promind + 4);
            listaDeTercetos.crearTerceto("WRITE", "@errorMayor");
            listaDeTercetos.crearTerceto("JMP", "fin");

            tablaDeSimbolos.agregarEnTabla("@resultado", "Integer", null, null);
			listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Promind = listaDeTercetos.crearTerceto("/", "@auxPromedio", "@contador");
            listaDeTercetos.crearTerceto("=", "@resultado", Promind);
           
        :}
        | promr para id:id pyc ca cc parc {: mostrarRegla(Regla.REGLA_7_SI);        
            listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            listaDeTercetos.crearTerceto("WRITE", "@errorListaVacia");
            listaDeTercetos.crearTerceto("JMP", "fin");
            listaVacia = true;
            
        :}
        ;

LISTA     ::= cte:cte {:
                     tablaDeSimbolos.agregarEnTabla("_"+cte,"Integer", cte, null);
                     tablaDeSimbolos.agregarEnTabla("_0","Integer", "0", null);
                     tablaDeSimbolos.agregarEnTabla("@contador","Integer", null, null);
                     tablaDeSimbolos.agregarEnTabla("@auxPromedio","Integer", null, null);
                     tablaDeSimbolos.agregarEnTabla("@pivot","Integer",null,null);
                    
                    listaDeTercetos.crearTerceto("=", "@contador", "_0" );
                    listaDeTercetos.crearTerceto("=", "@auxPromedio", "_0");
                    Lind =listaDeTercetos.crearTerceto("CMP", cte, "@pivot");
                    listaDeTercetos.crearTerceto("BGT", Lind + 6);
                    Lind = listaDeTercetos.crearTerceto("+", "@auxPromedio", cte);
                    listaDeTercetos.crearTerceto("=", "@auxPromedio",Lind);
                    Lind = listaDeTercetos.crearTerceto("+", "@contador", "_1");
                    listaDeTercetos.crearTerceto("=", "@contador",Lind);
					listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
                    :}   
                    |
                    LISTA coma cte:cte
                    {:
                    
                     tablaDeSimbolos.agregarEnTabla("_"+cte, "Integer", cte, null);
                    Lind =listaDeTercetos.crearTerceto("CMP", cte, "@pivot");
                    listaDeTercetos.crearTerceto("BGT", Lind + 6);
                    Lind = listaDeTercetos.crearTerceto("+", "@auxPromedio", cte);
                    listaDeTercetos.crearTerceto("=", "@auxPromedio",Lind);
                    Lind = listaDeTercetos.crearTerceto("+", "@contador", "_1");
                    listaDeTercetos.crearTerceto("=", "@contador",Lind);
                    listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
                    :} 
                    ;

WRITE   ::= write cte_s:cte_s {: mostrarRegla(Regla.REGLA_10_WRITE);
            String stringSinComillas = cte_s.substring(1, cte_s.length() - 1);
            String nombreCteString = "_cte_s" + contadorCteString;
            contadorCteString++;
            tablaDeSimbolos.agregarEnTabla(nombreCteString, "String", cte_s, stringSinComillas.length());
            listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Wind = listaDeTercetos.crearTerceto("WRITE", nombreCteString);
            :}
        | write id:id {: mostrarRegla(Regla.REGLA_11_WRITE);
           listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            if(!tablaDeSimbolos.existeEnTabla(id)) throw new Error("La variable < " + id + " > no esta definida");
            Wind = listaDeTercetos.crearTerceto("WRITE", id);
            :}
        ;