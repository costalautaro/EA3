
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.stream.IntStream;
import Tercetos.ListaDeTercetos;
import Tabla.TablaDeSimbolos;
import Assembler.GestorDeCodigoAssembler;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\004\000\002\006\005\000" +
    "\002\007\012\000\002\007\011\000\002\010\003\000\002" +
    "\010\005\000\002\011\004\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\010\005\005\012\014\020\006\001\002\000" +
    "\012\002\ufffd\005\ufffd\012\ufffd\020\ufffd\001\002\000\004" +
    "\006\022\001\002\000\004\005\021\001\002\000\004\002" +
    "\020\001\002\000\012\002\000\005\005\012\014\020\006" +
    "\001\002\000\012\002\uffff\005\uffff\012\uffff\020\uffff\001" +
    "\002\000\012\002\ufffb\005\ufffb\012\ufffb\020\ufffb\001\002" +
    "\000\012\002\ufffc\005\ufffc\012\ufffc\020\ufffc\001\002\000" +
    "\006\005\016\011\015\001\002\000\012\002\ufff4\005\ufff4" +
    "\012\ufff4\020\ufff4\001\002\000\012\002\ufff3\005\ufff3\012" +
    "\ufff3\020\ufff3\001\002\000\012\002\ufffe\005\ufffe\012\ufffe" +
    "\020\ufffe\001\002\000\004\002\001\001\002\000\012\002" +
    "\ufffa\005\ufffa\012\ufffa\020\ufffa\001\002\000\004\013\024" +
    "\001\002\000\012\002\ufff9\005\ufff9\012\ufff9\020\ufff9\001" +
    "\002\000\004\007\025\001\002\000\004\005\026\001\002" +
    "\000\004\014\027\001\002\000\004\015\030\001\002\000" +
    "\006\004\032\016\033\001\002\000\006\016\036\017\035" +
    "\001\002\000\006\016\ufff6\017\ufff6\001\002\000\004\010" +
    "\034\001\002\000\012\002\ufff7\005\ufff7\012\ufff7\020\ufff7" +
    "\001\002\000\004\004\040\001\002\000\004\010\037\001" +
    "\002\000\012\002\ufff8\005\ufff8\012\ufff8\020\ufff8\001\002" +
    "\000\006\016\ufff5\017\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\016\002\006\003\007\004\010\005\003\006" +
    "\011\011\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\016\005" +
    "\003\006\011\011\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalizadorSintactico$actions {


    Integer Sind, Pind, SEind, Rind, Aind, Promind, Lind, Wind, Etind;
    Integer contString;
    ListaDeTercetos listaDeTercetos = new ListaDeTercetos();
    TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
	Boolean listaVacia;
    GestorDeCodigoAssembler gestorDeCodigoAssembler = new GestorDeCodigoAssembler();
	Integer contadorCteString = 0;

    String errorListaVacia = "La lista esta vacia, resultado: 0";
    String errorPivot = "El valor debe ser >=1";
    String errorMayor = "No existen elementos para el calculo, el resultado es 0";
    public void mostrarRegla(Regla regla) {
//        System.out.println(regla);
    }
    public void agregarErroresATabla() {
        tablaDeSimbolos.agregarEnTabla("@errorListaVacia", "String", '"'+errorListaVacia+'"', errorListaVacia.length());
        tablaDeSimbolos.agregarEnTabla("@errorPivot", "String", '"'+errorPivot+'"', errorPivot.length());
        tablaDeSimbolos.agregarEnTabla("@errorMayor", "String", '"'+errorMayor+'"', errorMayor.length());
    }

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action_part00000000(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROG 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_0_S);
                Sind = Pind;
                agregarErroresATabla();
                tablaDeSimbolos.guardarTabla();
                listaDeTercetos.guardarTercetos();
                gestorDeCodigoAssembler.escribirAssemblerDeTercetos(listaDeTercetos.getTercetos(), tablaDeSimbolos.getListaDeSimbolos());
                System.out.println("Compilacion OK");
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROG ::= SENT 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_1_PROG);
            Pind = SEind;
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROG ::= PROG SENT 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_2_PROG); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROG",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENT ::= READ 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_3_SENT_R);
             SEind = Rind;
         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENT",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENT ::= WRITE 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_3_SENT_W);
            SEind = Wind;
         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENT",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENT ::= ASIG 
            {
              Symbol RESULT =null;
		 mostrarRegla(Regla.REGLA_3_SENT_A);
            SEind = Aind;
         
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("SENT",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // READ ::= read id 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 mostrarRegla(Regla.REGLA_4_READ);
            tablaDeSimbolos.agregarEnTabla(id, "Integer", null, null);
            tablaDeSimbolos.agregarEnTabla("_1" , "Integer", "1", null);
            String nombreCte = "_cte_s"+contadorCteString;
            contadorCteString++;
            String valorCte ="Por favor, ingrese nuevamente un numero: ";
            tablaDeSimbolos.agregarEnTabla(nombreCte, "String", '"'+valorCte+'"',null);
            
            Etind = listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Rind = listaDeTercetos.crearTerceto("READ", id);
            Rind =  listaDeTercetos.crearTerceto("CMP", id, "_1");
            Rind =  listaDeTercetos.crearTerceto("BGT", Rind + 5);
            listaDeTercetos.crearTerceto("WRITE", "@errorPivot");
            listaDeTercetos.crearTerceto("WRITE", nombreCte);
            listaDeTercetos.crearTerceto("READ", id);
            //listaDeTercetos.crearTerceto("BI", Etind);
			listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            listaDeTercetos.crearTerceto("=", "@pivot", id );
          
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("READ",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIG ::= id asigna PROMR 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		 mostrarRegla(Regla.REGLA_5_ASIG);
            tablaDeSimbolos.agregarEnTabla(id, "Integer", null, null);
            
            listaDeTercetos.crearTerceto("=", id, "@resultado");
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ASIG",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROMR ::= promr para id pyc ca LISTA cc parc 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)).value;
		 mostrarRegla(Regla.REGLA_6_SI);
            Promind = listaDeTercetos.crearTerceto("CMP", "@contador", "_0");
            listaDeTercetos.crearTerceto("BNE", Promind + 4);
            listaDeTercetos.crearTerceto("WRITE", "@errorMayor");
            listaDeTercetos.crearTerceto("JMP", "fin");

            tablaDeSimbolos.agregarEnTabla("@resultado", "Integer", null, null);
			listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Promind = listaDeTercetos.crearTerceto("/", "@auxPromedio", "@contador");
            listaDeTercetos.crearTerceto("=", "@resultado", Promind);
           
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROMR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROMR ::= promr para id pyc ca cc parc 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		 mostrarRegla(Regla.REGLA_7_SI);        
            listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            listaDeTercetos.crearTerceto("WRITE", "@errorListaVacia");
            listaDeTercetos.crearTerceto("JMP", "fin");
            listaVacia = true;
            
        
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PROMR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= cte 
            {
              Symbol RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                     tablaDeSimbolos.agregarEnTabla("_"+cte,"Integer", cte, null);
                     tablaDeSimbolos.agregarEnTabla("_0","Integer", "0", null);
                     tablaDeSimbolos.agregarEnTabla("@contador","Integer", null, null);
                     tablaDeSimbolos.agregarEnTabla("@auxPromedio","Integer", null, null);
                     tablaDeSimbolos.agregarEnTabla("@pivot","Integer",null,null);
                    
                    listaDeTercetos.crearTerceto("=", "@contador", "_0" );
                    listaDeTercetos.crearTerceto("=", "@auxPromedio", "_0");
                    Lind =listaDeTercetos.crearTerceto("CMP", cte, "@pivot");
                    listaDeTercetos.crearTerceto("BGT", Lind + 6);
                    Lind = listaDeTercetos.crearTerceto("+", "@auxPromedio", cte);
                    listaDeTercetos.crearTerceto("=", "@auxPromedio",Lind);
                    Lind = listaDeTercetos.crearTerceto("+", "@contador", "_1");
                    listaDeTercetos.crearTerceto("=", "@contador",Lind);
					listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA ::= LISTA coma cte 
            {
              Symbol RESULT =null;
		int cteleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cteright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cte = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		
                    
                     tablaDeSimbolos.agregarEnTabla("_"+cte, "Integer", cte, null);
                    Lind =listaDeTercetos.crearTerceto("CMP", cte, "@pivot");
                    listaDeTercetos.crearTerceto("BGT", Lind + 6);
                    Lind = listaDeTercetos.crearTerceto("+", "@auxPromedio", cte);
                    listaDeTercetos.crearTerceto("=", "@auxPromedio",Lind);
                    Lind = listaDeTercetos.crearTerceto("+", "@contador", "_1");
                    listaDeTercetos.crearTerceto("=", "@contador",Lind);
                    listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("LISTA",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // WRITE ::= write cte_s 
            {
              Symbol RESULT =null;
		int cte_sleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int cte_sright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String cte_s = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 mostrarRegla(Regla.REGLA_10_WRITE);
            String stringSinComillas = cte_s.substring(1, cte_s.length() - 1);
            String nombreCteString = "_cte_s" + contadorCteString;
            contadorCteString++;
            tablaDeSimbolos.agregarEnTabla(nombreCteString, "String", cte_s, stringSinComillas.length());
            listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            Wind = listaDeTercetos.crearTerceto("WRITE", nombreCteString);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WRITE",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // WRITE ::= write id 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 mostrarRegla(Regla.REGLA_11_WRITE);
           listaDeTercetos.crearTerceto("ETIQ", String.format("%02d", listaDeTercetos.getCantCreados()));
            if(!tablaDeSimbolos.existeEnTabla(id)) throw new Error("La variable < " + id + " > no esta definida");
            Wind = listaDeTercetos.crearTerceto("WRITE", id);
            
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("WRITE",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintactico$do_action_part00000000(
                               CUP$AnalizadorSintactico$act_num,
                               CUP$AnalizadorSintactico$parser,
                               CUP$AnalizadorSintactico$stack,
                               CUP$AnalizadorSintactico$top);
    }
}

}
